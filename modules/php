#!/usr/bin/env bash

#
# @module php functions
#

#
# Parse php version and export variables to the global scope.
# 
# string $1 php version.
#
# USAGE
# php_parse_version_from_string '5.3.6'
php_parse_version_from_string()
{
  PHP_VERSION=$1
  PHP_VMAJOR=`echo ${PHP_VERSION%%.*}`
  PHP_VMINOR=`echo ${PHP_VERSION%.*}`
  PHP_VMINOR=`echo ${PHP_VMINOR#*.}`
  PHP_VPATCH=`echo ${PHP_VERSION##*.}`
}

#
# Download and parse the available php source files.
# 
# string $1 server url with the anchors to the php source files.
#
# USAGE
# php_parse_versions_from_url 'http://museum.php.net/php4/'
# php_parse_versions_from_url 'http://museum.php.net/php5/'
php_parse_versions_from_url()
{
  curl -f -s -L $1 | sed -nE 's|^.*href="(php-[^"]+)".*$|\1| p'  
}

#
# Build the php version given a php version as parameter.
# 
# string $1 PHP version should be downloaded + compiled + installed locally.
#
install_php()
{
  # php source directory
  srcdir="$TMP_DIR/php-$PHP_VERSION"

  # php install directory
  instdir="$INSTALL_DIR/php-$PHP_VERSION"

  ### download php source
  if [ ! -d "$srcdir" ]; then

      echo -e "\033[1mDownloading $PHP_VERSION source code\033[0m"

      srcfile="$CACHE_DIR/php-$PHP_VERSION.tar.bz2"
      
      if [ ! -f "$srcfile" ]; then
          url=$(macro $PHP_MUSEUM '%%PHP_MAYOR%%' $PHP_VMAJOR)
          url=$(macro $url '%%PHP_VERSION%%' $PHP_VERSION)
          wget -P "$CACHE_DIR" "$url"
          
          if [ ! -f "$srcfile" ]; then
              url=$(macro $PHP_GET '%%PHP_VERSION%%' $PHP_VERSION)
              wget -P "$CACHE_DIR" -O "$srcfile" "$url"
          fi

          if [ ! -f "$srcfile" ]; then
              echo "Fetching sources failed:"
              echo $url
              exit 2
          fi
      fi
   
      cd $TMP_DIR
      echo -e "\033[1mUncompressing source code\033[0m"
      tar xjf "$srcfile"
      cd $BASE_DIR
  fi

  ### load ./configure parameters
  source 'options.sh' "$PHP_VERSION" "$PHP_VMAJOR" "$PHP_VMINOR" "$PHP_VPATCH"
  cd "$srcdir"
 
  echo -e "\033[1m./configure\033[0m"

  ### run ./configure
  ./configure \
   --prefix="$instdir" \
   --exec-prefix="$instdir" \
   --enable-debug \
   --disable-short-tags \
   --without-pear \
   $configoptions

  if [ $? -gt 0 ]; then
      echo configure.sh failed.
      exit 3
  fi

  echo -e "\033[1mmake\033[0m"
  ### run make
  make
  if [ "$?" -gt 0 ]; then
      echo make failed.
      exit 4
  fi

  confirm "Are you sure you want to install here: $instdir?"
  if [ $? -eq 1 ]; then
    exit 0
  fi

  echo -e "\033[1mmake install\033[0m"
  ### run make install
  make install
  if [ "$?" -gt 0 ]; then
      echo make install failed.
      exit 5
  fi

  # copy php.ini
  # initarget="$instdir/lib/php.ini"
  # if [ -f "php.ini-development" ]; then
      #php 5.3
  #    cp "php.ini-development" "$initarget"
  #elif [ -f "php.ini-recommended" ]; then
      #php 5.1, 5.2
  #    cp "php.ini-recommended" "$initarget"
  #else
  #    echo "No php.ini file found."
  #    echo "Please copy it manually to $instdir/lib/php.ini"
  #fi
  #set default ini values
#  cd "$basedir"
#  if [ -f "$initarget" ]; then
#      #fixme: make the options unique or so
#      custom="custom-php.ini"
#      [ ! -f $custom ] && cp "default-custom-php.ini" "$custom"
#      [ -f $custom ] && cat "$custom" >> "$initarget"
#      custom="custom-php-$vmajor.ini"
#      [ -f $custom ] && cat "$custom" >> "$initarget"
#      custom="custom-php-$vmajor.$vminor.ini"
#      [ -f $custom ] && cat "$custom" >> "$initarget"
#      custom="custom-php-$vmajor.$vminor.$vpatch.ini"
#      [ -f $custom ] && cat "$custom" >> "$initarget"
#  fi

  #create bin
#  [ ! -d "$BIN_DIR" ] && mkdir "$BIN_DIR"
#  if [ ! -d "$BIN_DIR" ]; then
#      echo "Cannot create shared bin dir"
#      exit 6
#  fi
  #symlink all files

  #php may be called php.gcno
#  bphp="$instdir/bin/php"
#  bphpgcno="$instdir/bin/php.gcno"
#  if [ -f "$bphp" ]; then 
#      ln -fs "$bphp" "$BIN_DIR/php-$PHP_VERSION"
#  elif [ -f "$bphpgcno" ]; then
#      ln -fs "$bphpgcno" "$BIN_DIR/php-$PHP_VERSION"
#  else
#      echo "no php binary found"
#      exit 7    
#  fi

  #php-cgi may be called php.gcno
#  bphpcgi="$instdir/bin/php-cgi"
#  bphpcgigcno="$instdir/bin/php-cgi.gcno"
#  if [ -f "$bphpcgi" ]; then 
#      ln -fs "$bphpcgi" "$BIN_DIR/php-cgi-$PHP_VERSION"
#  elif [ -f "$bphpcgigcno" ]; then
#      ln -fs "$bphpcgigcno" "$BIN_DIR/php-cgi-$PHP_VERSION"
#  else
#      echo "no php-cgi binary found"
#      exit 8
#  fi
#
#  ln -fs "$instdir/bin/php-config" "$BIN_DIR/php-config-$PHP_VERSION"
#  ln -fs "$instdir/bin/phpize" "$BIN_DIR/phpize-$PHP_VERSION"
}

# 
# Remove an existent php version from the system.
# 
uninstall_php()
{
  local dst="$INSTALL_DIR/php-$PHP_VERSION"

  if [ -d "$dst" ]; then
    confirm "Are you sure you want to delete $dst?"
    if [ $? -eq 0 ]; then
      rm -rf "$dst"
    fi
  fi
}

#
# Set the current environment using the given version.
#
# string $1 php version should be use as current environment.
#
set_current_php()
{
  echo $PHP_VERSION

  echo $PHP_VMAJOR
  echo $PHP_VMINOR
  echo $PHP_VPATCH
}

#
#
#
show_current_settings()
{
  echo "show current settings"
}

#
#
#
restore_default_settings()
{
  echo "restore default settings"
}

#
# Show available php versions using local file or download it from github
#
list_available_php()
{
  curl -f -L $PHP_VERSIONS
}

#
# Show installed php versions
#
list_installed_php()
{
  echo "list installed php versions"
}

## test
#
# List of available versions
# 
#
